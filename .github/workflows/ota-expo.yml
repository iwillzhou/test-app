name: Reusable Expo OTA Updates Workflow  

on:
  workflow_call:
    inputs:
      channel:
        description: 'staging / production'
        required: true
        type: string
      platform:
        description: 'android or ios'
        required: true
        type: string     
    secrets:
      EXPO_TOKEN:
        description: 'An API acesss token for Expo'
      VERCEL_UPLOAD_URL:
        description: 'An API endpoint for uplading to Vercel blob storage'
      VERCEL_BLOB_READ_WRITE_TOKEN:
        description: 'An API acesss token for Vercel blob storage'

jobs:
  update:
    name: Expo Update
    runs-on: ubuntu-latest
    env:
      CHANNEL: ${{ inputs.channel }}
      VERCEL_UPLOAD_URL: ${{ secrets.VERCEL_UPLOAD_URL }}
      VERCEL_BLOB_READ_WRITE_TOKEN: ${{ secrets.VERCEL_BLOB_READ_WRITE_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if curl is installed
        run: |
          if ! command -v curl &> /dev/null; then
            echo "curl is not installed, installing now..."
            sudo apt-get update && sudo apt-get install -y curl
          else
            echo "curl is already installed"
          fi
      
      - name: Set up Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 'latest'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i

      - name: Exported bundles
        run: pnpm exec expo export --platform ${{ inputs.platform }}

      - name: Copy expo config to dist
        run: npx expo config --json > dist/expoConfig.json

      - name: Computed project fingerprint / rumtimeVersion
        run: |
          FINGERPRINT=$(pnpm exec expo-updates fingerprint:generate --platform ${{ inputs.platform }} | jq -r '.hash')
          echo "FINGERPRINT=$FINGERPRINT" >> $GITHUB_ENV
      
      - name: Get eas projectid
        run: echo "PROJECT_ID=$(jq -r '.extra.eas.projectId' dist/expoConfig.json)" >> $GITHUB_ENV
      
      - name: Generate Unix Timestamp
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Get the path prefix 
        if: ${{ env.PROJECT_ID != '' && env.FINGERPRINT != '' && env.TIMESTAMP != '' }}
        run: |
          PATH_PREFIX=$PROJECT_ID/$CHANNEL/${{ inputs.platform }}/$FINGERPRINT/$TIMESTAMP
          echo "PATH_PREFIX=$PATH_PREFIX"  >> $GITHUB_ENV
          echo "The path prefix is $PATH_PREFIX"

      - name: Upload bundles to Vercel Blob Storage
        run: |
          for file in $(find ./dist -type f); do
            path=$(echo "$file" | sed 's|^./dist/||')
            echo "Uploading file: $path"
            curl -X POST "$VERCEL_UPLOAD_URL/api/upload" \
              -H "Authorization: Bearer $VERCEL_BLOB_READ_WRITE_TOKEN" \
              -F "file=@$file" \
              -F "path=$PATH_PREFIX/$path"
          done
